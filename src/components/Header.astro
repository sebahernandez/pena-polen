<!-- Navbar Container con padding para efecto flotante -->
<div class="w-full px-4 sm:px-6 lg:px-8 py-4">
  <nav class="max-w-7xl mx-auto bg-white/80 light:bg-white/90 dark:bg-gray-900 backdrop-blur-md rounded-2xl shadow-lg shadow-gray-200/50 dark:shadow-gray-900/50 border border-gray-200/50 light:border-gray-300/50 dark:border-gray-700/50 transition-all duration-200">
    <div class="px-4 sm:px-6 lg:px-8">
      <div class="relative flex h-16 items-center justify-between">
        <div class="absolute inset-y-0 left-0 flex items-center sm:hidden">
          <!-- Mobile menu button-->
          <button 
            type="button" 
            id="mobile-menu-button"
            class="relative inline-flex items-center justify-center rounded-xl p-2.5 text-gray-600 light:text-gray-700 dark:text-gray-300 hover:bg-gray-100/80 light:hover:bg-gray-200/80 dark:hover:bg-gray-800/80 hover:text-gray-900 light:hover:text-black dark:hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500 transition-all duration-200"
            aria-controls="mobile-menu" 
            aria-expanded="false"
          >
            <span class="sr-only">Abrir menú principal</span>
            <!-- Hamburger icon -->
            <svg id="hamburger-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="size-6">
              <path d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
            <!-- Close icon -->
            <svg id="close-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="size-6 hidden">
              <path d="M6 18 18 6M6 6l12 12" stroke-linecap="round" stroke-linejoin="round" />
            </svg>
          </button>
        </div>
        
        <div class="flex flex-1 items-center justify-center sm:items-stretch sm:justify-start">
          <div class="flex shrink-0 items-center">
            <a href="/" class="flex items-center space-x-2 group">
              <div class="bg-gradient-to-br from-indigo-500 to-purple-600 dark:from-indigo-400 dark:to-purple-500 rounded-xl p-1.5 shadow-md group-hover:shadow-lg transition-all duration-200">
                <svg class="size-6 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                </svg>
              </div>
              <span class="text-gray-900 light:text-black dark:text-gray-100 text-xl font-bold tracking-tight">PeñaPolen</span>
            </a>
          </div>
          
          <div class="hidden sm:ml-8 sm:flex sm:items-center">
            <div class="flex space-x-1 bg-gray-100/50 light:bg-gray-200/50 dark:bg-gray-800/50 rounded-xl p-1">
              <a href="/" aria-current="page" class="rounded-lg bg-white light:bg-white dark:bg-gray-700 px-4 py-2 text-sm font-semibold text-gray-900 light:text-black dark:text-white shadow-sm transition-all duration-200">Inicio</a>
              <a href="/historial" class="rounded-lg px-4 py-2 text-sm font-medium text-gray-600 light:text-gray-700 dark:text-gray-300 hover:bg-white/50 light:hover:bg-white/70 dark:hover:bg-gray-700/50 hover:text-gray-900 light:hover:text-black dark:hover:text-white transition-all duration-200">Historial</a>
              <a href="/graficos" class="rounded-lg px-4 py-2 text-sm font-medium text-gray-600 light:text-gray-700 dark:text-gray-300 hover:bg-white/50 light:hover:bg-white/70 dark:hover:bg-gray-700/50 hover:text-gray-900 light:hover:text-black dark:hover:text-white transition-all duration-200">Gráficos</a>
              <a href="/contacto" class="rounded-lg px-4 py-2 text-sm font-medium text-gray-600 light:text-gray-700 dark:text-gray-300 hover:bg-white/50 light:hover:bg-white/70 dark:hover:bg-gray-700/50 hover:text-gray-900 light:hover:text-black dark:hover:text-white transition-all duration-200">Contacto</a>
            </div>
          </div>
        </div>
        
        <div class="absolute inset-y-0 right-0 flex items-center gap-2 pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0">
          <!-- Dark Mode Toggle -->
          <button 
            type="button" 
            id="theme-toggle"
            class="relative rounded-xl p-2.5 text-gray-600 light:text-gray-700 dark:text-gray-300 hover:bg-gray-100/80 light:hover:bg-gray-200/80 dark:hover:bg-gray-800/80 hover:text-gray-900 light:hover:text-black dark:hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500 transition-all duration-200"
            title="Cambiar tema"
          >
            <span class="sr-only">Alternar modo oscuro</span>
            <!-- Sun Icon (visible en dark mode) -->
            <svg id="theme-toggle-light-icon" class="size-5 hidden" fill="currentColor" viewBox="0 0 20 20">
              <path d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z" fill-rule="evenodd" clip-rule="evenodd"></path>
            </svg>
            <!-- Moon Icon (visible en light mode) -->
            <svg id="theme-toggle-dark-icon" class="size-5" fill="currentColor" viewBox="0 0 20 20">
              <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
            </svg>
          </button>
          
          <!-- Notifications Button with Dropdown -->
          <div class="relative">
            <button 
              type="button" 
              id="notifications-button"
              class="relative rounded-xl p-2.5 text-gray-600 light:text-gray-700 dark:text-gray-300 hover:bg-gray-100/80 light:hover:bg-gray-200/80 dark:hover:bg-gray-800/80 hover:text-gray-900 light:hover:text-black dark:hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-indigo-500 transition-all duration-200"
            >
              <span class="sr-only">Ver notificaciones</span>
              <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" class="size-5">
                <path d="M14.857 17.082a23.848 23.848 0 0 0 5.454-1.31A8.967 8.967 0 0 1 18 9.75V9A6 6 0 0 0 6 9v.75a8.967 8.967 0 0 1-2.312 6.022c1.733.64 3.56 1.085 5.455 1.31m5.714 0a24.255 24.255 0 0 1-5.714 0m5.714 0a3 3 0 1 1-5.714 0" stroke-linecap="round" stroke-linejoin="round" />
              </svg>
              <!-- Badge para notificaciones no leídas -->
              <span id="notification-badge" class="hidden absolute top-1.5 right-1.5 flex h-2 w-2">
                <span class="animate-ping absolute inline-flex h-full w-full rounded-full bg-indigo-400 opacity-75"></span>
                <span class="relative inline-flex rounded-full h-2 w-2 bg-indigo-500"></span>
              </span>
            </button>

            <!-- Dropdown de notificaciones -->
            <div 
              id="notifications-dropdown"
              class="hidden absolute right-0 mt-2 w-80 sm:w-96 bg-white dark:bg-gray-800 rounded-2xl shadow-2xl border border-gray-200 dark:border-gray-700 overflow-hidden z-50"
            >
              <!-- Header del dropdown -->
              <div class="px-4 py-3 border-b border-gray-200 dark:border-gray-700 bg-gradient-to-r from-gray-50 to-white dark:from-gray-800 dark:to-gray-800">
                <div class="flex items-center justify-between">
                  <h3 class="text-sm font-semibold text-gray-900 dark:text-white">Notificaciones</h3>
                  <button 
                    id="mark-all-read"
                    class="text-xs font-medium text-indigo-600 dark:text-indigo-400 hover:text-indigo-700 dark:hover:text-indigo-300 transition-colors"
                  >
                    Marcar todas como leídas
                  </button>
                </div>
              </div>

              <!-- Lista de notificaciones -->
              <div id="notifications-list" class="max-h-96 overflow-y-auto">
                <!-- Las notificaciones se cargarán dinámicamente aquí -->
                <div class="px-4 py-8 text-center text-gray-500 dark:text-gray-400">
                  <svg class="mx-auto h-12 w-12 text-gray-400 dark:text-gray-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                  </svg>
                  <p class="text-sm">No hay notificaciones</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Mobile menu -->
    <div id="mobile-menu" class="hidden sm:hidden border-t border-gray-200/50 dark:border-gray-700/50">
      <div class="space-y-1 px-4 pt-3 pb-4">
        <a href="/" aria-current="page" class="block rounded-xl bg-gray-100/80 light:bg-gray-200/80 dark:bg-gray-800/80 px-4 py-3 text-base font-semibold text-gray-900 light:text-black dark:text-white shadow-sm transition-all duration-200">Inicio</a>
        <a href="/historial" class="block rounded-xl px-4 py-3 text-base font-medium text-gray-600 light:text-gray-700 dark:text-gray-300 hover:bg-gray-100/50 light:hover:bg-gray-200/50 dark:hover:bg-gray-800/50 hover:text-gray-900 light:hover:text-black dark:hover:text-white transition-all duration-200">Historial</a>
        <a href="/graficos" class="block rounded-xl px-4 py-3 text-base font-medium text-gray-600 light:text-gray-700 dark:text-gray-300 hover:bg-gray-100/50 light:hover:bg-gray-200/50 dark:hover:bg-gray-800/50 hover:text-gray-900 light:hover:text-black dark:hover:text-white transition-all duration-200">Gráficos</a>
        <a href="/contacto" class="block rounded-xl px-4 py-3 text-base font-medium text-gray-600 light:text-gray-700 dark:text-gray-300 hover:bg-gray-100/50 light:hover:bg-gray-200/50 dark:hover:bg-gray-800/50 hover:text-gray-900 light:hover:text-black dark:hover:text-white transition-all duration-200">Contacto</a>
      </div>
    </div>
  </nav>
</div>

<script>
// Definir tipos para las notificaciones
interface PollenLevel {
  type: string;
  level: string;
}

interface Notification {
  id: number;
  recordId: string;
  title: string;
  message: string;
  timestamp: number;
  read: boolean;
  levels: PollenLevel[];
}

document.addEventListener('DOMContentLoaded', () => {
  // Mobile menu toggle
  const menuButton = document.getElementById('mobile-menu-button');
  
  if (!menuButton) return;
  
  menuButton.addEventListener('click', () => {
    const mobileMenu = document.getElementById('mobile-menu');
    const hamburgerIcon = document.getElementById('hamburger-icon');
    const closeIcon = document.getElementById('close-icon');
    
    if (!mobileMenu || !hamburgerIcon || !closeIcon) return;
    
    const isMenuHidden = mobileMenu.classList.contains('hidden');
    
    // Configurar estado cuando el menú está oculto (mostrar menú)
    if (isMenuHidden) {
      mobileMenu.classList.remove('hidden');
      hamburgerIcon.classList.add('hidden');
      closeIcon.classList.remove('hidden');
      menuButton.setAttribute('aria-expanded', 'true');
      return;
    }
    
    // Configurar estado cuando el menú está visible (ocultar menú)
    mobileMenu.classList.add('hidden');
    hamburgerIcon.classList.remove('hidden');
    closeIcon.classList.add('hidden');
    menuButton.setAttribute('aria-expanded', 'false');
  });

  // Dark mode toggle
  const themeToggleBtn = document.getElementById('theme-toggle');
  const themeToggleLightIcon = document.getElementById('theme-toggle-light-icon');
  const themeToggleDarkIcon = document.getElementById('theme-toggle-dark-icon');

  function updateIcons() {
    const isDark = document.documentElement.classList.contains('dark');
    console.log('Updating icons, isDark:', isDark);

    if (!themeToggleLightIcon || !themeToggleDarkIcon) return;
    
    themeToggleLightIcon.classList.toggle('hidden', !isDark);
    themeToggleDarkIcon.classList.toggle('hidden', isDark);
  }

  // Inicializar con dark mode por defecto
  const savedTheme = localStorage.getItem('color-theme');
  const isLight = savedTheme === 'light';

  document.documentElement.classList.toggle('light', isLight);
  document.documentElement.classList.toggle('dark', !isLight);
    
  // Actualizar iconos al cargar
  updateIcons();

  // Dark mode toggle event
  if (!themeToggleBtn) return;
  
  themeToggleBtn.addEventListener('click', () => {
    console.log('Toggle clicked, current classes:', document.documentElement.className);
    
    const isDark = document.documentElement.classList.contains('dark');
    
    // Cambiar a light mode si está en dark
    if (isDark) {
      document.documentElement.classList.remove('dark');
      document.documentElement.classList.add('light');
      localStorage.setItem('color-theme', 'light');
      console.log('Saved theme: light');
      updateIcons();
      return;
    }
    
    // Cambiar a dark mode si está en light
    document.documentElement.classList.remove('light');
    document.documentElement.classList.add('dark');
    localStorage.setItem('color-theme', 'dark');
    console.log('Saved theme: dark');
    updateIcons();
  });

  // ==================== NOTIFICATIONS SYSTEM ====================
  const notificationsButton = document.getElementById('notifications-button');
  const notificationsDropdown = document.getElementById('notifications-dropdown');
  const notificationBadge = document.getElementById('notification-badge');
  const notificationsList = document.getElementById('notifications-list');
  const markAllReadBtn = document.getElementById('mark-all-read');

  // Función para obtener notificaciones del localStorage
  function getNotifications(): Notification[] {
    try {
      const stored = localStorage.getItem('pollen-notifications');
      return stored ? JSON.parse(stored) : [];
    } catch (e) {
      console.error('Error al cargar notificaciones:', e);
      return [];
    }
  }

  // Función para guardar notificaciones
  function saveNotifications(notifications: Notification[]) {
    try {
      localStorage.setItem('pollen-notifications', JSON.stringify(notifications));
    } catch (e) {
      console.error('Error al guardar notificaciones:', e);
    }
  }

  // Función para formatear fecha relativa
  function getRelativeTime(timestamp: number) {
    const now = Date.now();
    const diff = now - timestamp;
    const minutes = Math.floor(diff / 60000);
    const hours = Math.floor(diff / 3600000);
    const days = Math.floor(diff / 86400000);

    if (minutes < 1) return 'Ahora mismo';
    if (minutes < 60) return `Hace ${minutes} min`;
    if (hours < 24) return `Hace ${hours}h`;
    if (days === 1) return 'Ayer';
    return `Hace ${days} días`;
  }

  // Función para renderizar notificaciones
  function renderNotifications() {
    const notifications = getNotifications();
    const unreadCount = notifications.filter((n: Notification) => !n.read).length;

    // Mostrar/ocultar badge
    if (unreadCount > 0) {
      notificationBadge?.classList.remove('hidden');
    } else {
      notificationBadge?.classList.add('hidden');
    }

    if (!notificationsList) return;

    // Si no hay notificaciones
    if (notifications.length === 0) {
      notificationsList.innerHTML = `
        <div class="px-4 py-8 text-center text-gray-500 dark:text-gray-400">
          <svg class="mx-auto h-12 w-12 text-gray-400 dark:text-gray-600 mb-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
          </svg>
          <p class="text-sm">No hay notificaciones</p>
        </div>
      `;
      return;
    }

    // Renderizar lista de notificaciones
    notificationsList.innerHTML = notifications
      .sort((a, b) => b.timestamp - a.timestamp)
      .map((notification) => `
        <div class="px-4 py-3 hover:bg-gray-50 dark:hover:bg-gray-700/50 transition-colors border-b border-gray-100 dark:border-gray-700 last:border-b-0 ${!notification.read ? 'bg-indigo-50/50 dark:bg-indigo-900/10' : ''}">
          <div class="flex items-start space-x-3">
            <div class="flex-shrink-0">
              <div class="w-10 h-10 rounded-full bg-gradient-to-br from-indigo-500 to-purple-600 dark:from-indigo-400 dark:to-purple-500 flex items-center justify-center">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20 7l-8-4-8 4m16 0l-8 4m8-4v10l-8 4m0-10L4 7m8 4v10M4 7v10l8 4" />
                </svg>
              </div>
            </div>
            <div class="flex-1 min-w-0">
              <div class="flex items-start justify-between">
                <p class="text-sm font-medium text-gray-900 dark:text-white">
                  ${notification.title}
                </p>
                ${!notification.read ? '<div class="ml-2 flex-shrink-0 w-2 h-2 bg-indigo-500 rounded-full"></div>' : ''}
              </div>
              <p class="mt-1 text-sm text-gray-600 dark:text-gray-300">
                ${notification.message}
              </p>
              ${notification.levels ? `
                <div class="mt-2 flex flex-wrap gap-1">
                  ${notification.levels.map((level) => `
                    <span class="inline-flex items-center px-2 py-0.5 rounded-md text-xs font-medium ${
                      level.level === 'ALTOS' ? 'bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-300' :
                      level.level === 'MEDIOS' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900/30 dark:text-yellow-300' :
                      'bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-300'
                    }">
                      ${level.type}: ${level.level}
                    </span>
                  `).join('')}
                </div>
              ` : ''}
              <p class="mt-2 text-xs text-gray-500 dark:text-gray-400">
                ${getRelativeTime(notification.timestamp)}
              </p>
            </div>
          </div>
        </div>
      `).join('');
  }

  // Toggle dropdown
  notificationsButton?.addEventListener('click', (e) => {
    e.stopPropagation();
    const isHidden = notificationsDropdown?.classList.contains('hidden');
    
    if (isHidden) {
      notificationsDropdown?.classList.remove('hidden');
      renderNotifications();
    } else {
      notificationsDropdown?.classList.add('hidden');
    }
  });

  // Cerrar dropdown al hacer click fuera
  document.addEventListener('click', (e) => {
    const target = e.target;
    if (target instanceof Node) {
      if (!notificationsDropdown?.contains(target) && 
          !notificationsButton?.contains(target)) {
        notificationsDropdown?.classList.add('hidden');
      }
    }
  });

  // Marcar todas como leídas
  markAllReadBtn?.addEventListener('click', () => {
    const notifications = getNotifications();
    const updatedNotifications = notifications.map((n) => ({ ...n, read: true }));
    saveNotifications(updatedNotifications);
    renderNotifications();
  });

  // Verificar nuevas actualizaciones cada 30 segundos
  async function checkForUpdates() {
    try {
      const response = await fetch('/api/penaflor?action=latest');
      const data = await response.json();
      
      if (data.success && data.data) {
        const lastCheck = localStorage.getItem('last-pollen-check');
        const recordDate = new Date(data.data.date).getTime();
        
        // Si es una actualización nueva
        if (!lastCheck || recordDate > parseInt(lastCheck)) {
          const notifications = getNotifications();
          
          // Verificar si ya existe esta notificación
          const exists = notifications.some((n) => n.recordId === data.data.id);
          
          if (!exists) {
            const newNotification = {
              id: Date.now(),
              recordId: data.data.id,
              title: '¡Niveles de polen actualizados!',
              message: `Nuevos datos disponibles para ${data.data.city}`,
              timestamp: Date.now(),
              read: false,
              levels: data.data.levels?.slice(0, 3) || [] // Mostrar solo los primeros 3 niveles
            };
            
            notifications.unshift(newNotification);
            
            // Mantener solo las últimas 10 notificaciones
            if (notifications.length > 10) {
              notifications.pop();
            }
            
            saveNotifications(notifications);
            renderNotifications();
            
            localStorage.setItem('last-pollen-check', recordDate.toString());
          }
        }
      }
    } catch (error) {
      console.error('Error al verificar actualizaciones:', error);
    }
  }

  // Verificar al cargar la página
  checkForUpdates();
  
  // Verificar cada 30 segundos
  setInterval(checkForUpdates, 30000);

  // Renderizar notificaciones iniciales
  renderNotifications();
});
</script>
